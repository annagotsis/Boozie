www.bottlecaps.de/rr/ui



Program         ::= Block
Block           ::= (Stmt)*("\n" Stmt)*
Stmt            ::= IfStmt                                
                  | ForStmt                                
                  | WhileStmt                               
                  | MatchStmt                             
                  | ReturnStmt                              
                  | VarDecl                                 
                  | Print                                  
                  | FunDecl                                 
                  | Exp                                     

IfStmt          ::= "if" Exp "{" Block "}" ("else if" Exp "{" Block "}")* ("else" "{" Block "}" )?
WhileStmt       ::= "while" Exp "{" Block "}"
ForStmt         ::= "for" id "in" id "{" Block "}"
FunDecl         ::= "let" id "=" Params "=>" "{" Block "}"
Params          ::= "(" id* ("," id)* ")"
MatchStmt       ::= "match" Exp "with" "\n" MatchPart
MatchPart       ::= ">>" Pattern ("::" Pattern)*
Pattern         ::= Exp                                    
                  | Other
Other           ::= "_"                                    
ReturnStmt      ::= "return" Exp
ConstDecl       ::= "set" id ("," id)* "=" Exp ("," Exp)*       
ConstArrayDecl  ::= "set"  id "=" "[" Exp? ("," Exp)* "]"       
VarDecl         ::= "let" id ("," id)* assignOp Exp ("," Exp)*  
VarArrayDecl    ::= "let" id "=" "[" Exp? ("," Exp)* "]"       
Print           ::= "burp" "(" Exp ")"                            
Exp             ::= Exp1 ("and" Exp)* | Exp1 ("or" Exp)*
Exp1            ::= Exp2 (relationalOp Exp2)?               
Exp2            ::= Exp3 (addOp Exp3)*                      
Exp3            ::= Exp4 (mulOp Exp4)*                      
Exp4            ::= "-"? Exp5                              
Exp5            ::= Literal
                  | id                                      
                  | "(" Exp ")"                             
                  | id "(" Args ")"                         
Args            ::= Exp ("," Exp)*
Literal         ::= floatlit                                  
                  | boollit                                 
                  | stringlit                              

type            ::= "float"                                   
                  | "bool"                                  
                  | "string"                               
boollit         ::= "true"                                    
                  | "false"                                 
floatlit        ::= digit+ ("." digit+)? (("E"|"e") ("+"|"-"))?
stringlit       ::= "\"" char* \"
    char        ::= [^'] [^"] (escape | any)
    escape      ::= "\\" ("r" | "n" | "'" | '\' | coded)
    coded       ::= "u" hexDigit hexDigit hexDigit hexDigit

keyword         ::= ("let"    | "set"   | "burp"  | "for"   | "in"
                  | "while" | "match" | "if"    | "else"  | "new"
                  | "true"  | "false" | "return") -[_A-Za-z0-9]
id              ::= letter [^_A-Za-z0-9]*

comment         ::= '//' ([^\n] any)* '\n'

assignOp        ::= "="                                       
                  | "+="                                   
                  | "*="                                  
                  | "-="                                    
                  | "/="                                    
                  | "%="                                    
relationalOp    ::= "=="                                      
                  | ">"                                    
                  | "<"                                     
                  | ">="                                   
                  | "<="                                   
                  | "!="                                   
addOp           ::= "+"                                      
                  | "-"                                     
mulOp           ::= "*"                                      
                  | "/"                                    
                  | "%"                                     
